
//import java.io.InputStream;
import java.util.Collection;
import java.util.Scanner;

import atm.Account;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Application {
	

	public static void main(String[] args) {
		
		
		Scanner input = new Scanner(System.in);
		
		
		

		
		//Program assumes it's a new user so it has them set up a PIN number, rather than hardcoding one

		System.out.println("Card Inserted.  Welcome New User");
		System.out.println("Please Select a 4 digit Personal Indentification Number.");

		int pinNumber = input.nextInt();

		System.out.println("Please reenter PIN to verify.");

		int pinVerify = input.nextInt();

		while (pinVerify != pinNumber) {
			System.out.println("PIN numbers did not match");
			System.out.println("Please select a 4 digit Personal Indentification Number.");

			pinNumber = input.nextInt();

			System.out.println("Please reenter PIN to verify.");

			pinVerify = input.nextInt();

		}

		Account pinATM = new Account(pinNumber);

		// pass PIN to method for verification
		int userPIN = pinATM.checkPIN(pinNumber);

		// Display PIN to make sure I did the code right.
		System.out.println("Your PIN is " + userPIN);
		System.out.println("Please Enter 4 digit Personal Indentification Number.");
		pinNumber = input.nextInt();

		while (pinNumber != userPIN) {
			System.out.println("Incorrect PIN. Please Enter 4 digit Personal Indentification Number.");
			pinNumber = input.nextInt();

		}

		// refactored method menu options to a method

		int atmOption = mainUserMenu(input);

		// while statement to prompt user to enter a valid response
		while (atmOption >= 5) {
			System.out.println("Invalid Option, please select from an option below.");

			atmOption = mainUserMenu(input);

		} // end while move to end of code

		atmOption = optionSwitch(input, atmOption);// close switch

		System.out.println(atmOption);

	}// close method

	// method for switch
	private static int optionSwitch(Scanner input, int atmOption) {
		Atm atmtable = new Atm();
		
		atmtable.addAccount(new Account("1", 100));
		atmtable.addAccount(new Account("2", 200));
		atmtable.addAccount(new Account("3", 300));
		while(atmOption != 5) {
			
			if(atmOption == 1) //withdraw method 
			{
				System.out.println("Your account balances are as follows: ");
				for (Account account : atmtable.getAccounts().values()) //display user accounts
				{
					System.out.println(account.getAccountNumber() + " current balance: " + account.checkBalance());
				}
				System.out.println("Which account would you like to withdraw from?");
				String userAccountChoice = input.next();
				//receives user account
				System.out.println("How much would you like to take out?");
				System.out.println("Please enter the amount in multiples of 10's.");
				System.out.println("How much would you like to withdraw (enter 50 for test)?");
				int withdraw = input.nextInt(); //receives the amount of withdrawal

				//selects the account from the atm
				Account withDrawalAccountChoice = atmtable.getAccount(userAccountChoice);
				
				
				/*compares the original balance against the new balance - if the user attempts to withdrawl and amount higher than the original balance
				 * the withdrawl method will return the original balance, causing the while loop to trigger prompting user to enter an amount lower than available balance
				 */
				int originalBalance = withDrawalAccountChoice.checkBalance(); // runs checkbalance method
				withDrawalAccountChoice.withdraw(withdraw);
				int newBalance = withDrawalAccountChoice.checkBalance(); // runs balance code to check balance

			// while for determining 10's
					while(withdraw % 10 != 0) {
						System.out.println("Invalid amount, enter multiples of $10's");
						System.out.println("How much would you like to withdraw (enter 50 for test)?");
						withdraw = input.nextInt();

						//selects the account from the atm
						withDrawalAccountChoice = atmtable.getAccount(userAccountChoice);
						
						

						originalBalance = withDrawalAccountChoice.checkBalance(); // runs checkbalance method
						withDrawalAccountChoice.withdraw(withdraw);
						newBalance = withDrawalAccountChoice.checkBalance(); // runs balance code to check balance

						} // close while
							/*while loop, withdraw method will send back the original balance it the amount to withdraw is greater than the
							 * available balance
							 * 
							 */
							while (originalBalance == newBalance) {
								System.out.println("You attempted to with draw $" + withdraw + ". However, your current balance is $"
										+ originalBalance + ".");
								System.out.println("Please enter a smaller amount");

								System.out.println("How much would you like to withdraw (enter 50 for test)?");
								withdraw = input.nextInt();

								//selects the account from the atm
								withDrawalAccountChoice = atmtable.getAccount(userAccountChoice);
								
								

								originalBalance = withDrawalAccountChoice.checkBalance(); // runs checkbalance method
								withDrawalAccountChoice.withdraw(withdraw);
								newBalance = withDrawalAccountChoice.checkBalance(); // runs balance code to check balance

								// nested while to ensure that they still enter the new amount in multiples of
								// 10.
									while (withdraw % 10 != 0) {
										System.out.println("Invalid amount, enter multiples of $10's");
										System.out.println("How much would you like to withdraw (enter 50 for test)?");
										withdraw = input.nextInt();

										//selects the account from the atm
										withDrawalAccountChoice = atmtable.getAccount(userAccountChoice);
										
										

										originalBalance = withDrawalAccountChoice.checkBalance(); // runs checkbalance method
										withDrawalAccountChoice.withdraw(withdraw);
										newBalance = withDrawalAccountChoice.checkBalance(); // runs balance code to check balance

									} // close nested while

							} // close while determining 10's

				//Verifies withdrawal amount and new balance for user
				System.out.println("Processing transaction for $" + withdraw + ".");
				System.out.println("New Balance is $" + newBalance + ".");
				
				
				//calls user main menu 
				atmOption = mainUserMenu(input); 
			
			}//close else if for option 1 withdrawal
				else if(atmOption == 2)//deposit method
					{
					System.out.println("Your account balances are as follows: ");
					for (Account account : atmtable.getAccounts().values()) //display user accounts
					{
						System.out.println(account.getAccountNumber() + " current balance: " + account.checkBalance());
					}
					System.out.println("Which account would you like to deposit to?");
					String userAccountChoice = input.next();
					//receives user account
					System.out.println("How much would you like to deposit?");
					
					int deposit = input.nextInt(); //receives the amount of withdrawal

					//selects the account from the atm
					Account depositAccountChoice = atmtable.getAccount(userAccountChoice);
					
					
					
					depositAccountChoice.deposit(deposit);
					int newBalance = depositAccountChoice.checkBalance(); // runs balance code to check balance
					
					
					
					
					
					
		
					System.out.println("Your new balance is " + newBalance);
					atmOption = mainUserMenu(input); 
			
				}// close else if for option 2 deposit
				else if(atmOption == 3) //check balances
				{
					
				Atm atm = new Atm();
				Collection<Account> userAccounts = atm.getAccounts().values();
				System.out.println("Your account balances are as follows:");
				for(Account account : userAccounts) {
					//identify how many accounts are available, then loop through each one
					System.out.println("Account " + account.getAccountNumber() +" has $" + account.checkBalance());
					
				}//close option 3
				
				
				
				
				
				
				
				atmOption = mainUserMenu(input);
				
				
			


			
			}//close else if for option 3 check balance
			else if (atmOption == 4) //adding account balance
			{ 
				//menu for adding an account balance
				Atm atm= new Atm();
				
				//get info to make account
				System.out.println("Please enter a unique Account Number");
				String userAccountNumber = input.next();
				System.out.println("Please enter a starting balance for your account. ");
				int userStartingBalance = input.nextInt();
				
				input.nextLine(); //clearing the input line
				
				//Make said account
				Account newUserAccount = new Account(userAccountNumber, userStartingBalance);
				
				//add account to atm
				atmtable.addAccount(newUserAccount);
				System.out.println("Current user Account number: " + atmtable.getAccountsLength());
				
				
				//System.out.println("1. Add More Accounts");
				//System.out.println("2. Return to Main Menu");
				//int acctMenuOption = input.nextInt();
				
				//Exit to main menu or add more accounts
				
				
				
				
			/*	while(acctMenuOption != 3) {
				if (acctMenuOption == 1){
					addNewAccountMenu(input);
				} else if(acctMenuOption == 2)
				{
					atmOption = mainUserMenu(input);
				}
				
				
				}//end account menu while*/
				atmOption = mainUserMenu(input);
			}//option 4 to add an account
			else if(atmOption == 5)
			{
				exitMessage();
			}
		//close else if for option 4 quit
			else if (atmOption <= 0 || atmOption > 4) {
				System.out.println("Invalid Option, please select from an option below.");

				atmOption = mainUserMenu(input);

				
			}
		}//end while and nested if's
		
//		
		exitMessage();
		return atmOption;
		
	}

	private static int addNewAccountMenu(Scanner input) {
		Atm atm= new Atm();
		
		//get info to make account
		System.out.println("Please enter a unique Account Number");
		String userAccountNumber = input.next();
		System.out.println("Please enter a starting balance for your account. ");
		int userStartingBalance = input.nextInt();
		
		input.nextLine(); //clearing the input line
		
		//Make said account
		Account newUserAccount = new Account(userAccountNumber, userStartingBalance);
		
		//add account to atm
		atm.addAccount(newUserAccount);
		System.out.println("Current user Account number: " + atm.getAccountsLength());
		
		
		System.out.println("1. Add More Accounts");
		System.out.println("2. Return to Main Menu");
		int acctMenuOption = input.nextInt();
		return acctMenuOption;
		
	}//end optionSwitch method

	private static void exitMessage() {
		System.out.println("Thank you for choosing the Fry National Bank!");
		System.out.println("Visit us on the web at www.frybank.com.  Download our app!");
		System.exit(0);
	}// close exitMessage

	private static int mainUserMenu(Scanner input) {
		System.out.println("Welcome to The Fry National Bank!");
		System.out.println("What can we do for you today?");
		System.out.println("1. Withdrawal");
		System.out.println("2. Deposit");
		System.out.println("3. Check Balance");
		System.out.println("4. Add Account");
		System.out.println("5. Quit");

		int atmOption = input.nextInt();
		return atmOption;
	}// close mainUserMenu
}// close class
